// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}






model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String    @default("Linkey User")
  username        String    @default("")
  bio             String    @default("I am a linkey user âœŒ")
  email           String    @unique
  emailVerified   DateTime?
  image           String    @default("https://antrikshdev.tech/user.png")
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  apiKey          ApiKey[]
  apiKeyId        String?
  shortUrls       ShortUrl[]
  accounts        Account[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model ShortUrl {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  shortUrl  String    @unique
  longUrl   String
  clicks    Int
  rawData   RawData[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RawData {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  ip        String
  device    String
  agents    String
  shorturlId String @db.ObjectId
  shortUrl  ShortUrl @relation(fields: [shorturlId], references: [id], onDelete: Cascade)
}



model ApiKey {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  key     String  @unique
  enabled Boolean @default(true)
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String  @db.ObjectId

  requests ApiRequest[]

  @@unique([userId, key, enabled])
}

model ApiRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp DateTime @default(now())
  method    String
  path      String
  status    Int
  duration  Int

  usedApiKey String

  ApiKey   ApiKey @relation(fields: [apiKeyId], references: [id])
  apiKeyId String @db.ObjectId

  @@unique([apiKeyId])
}

model VerificationToken {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String
  token       String    @unique
  expires     DateTime

  @@unique([identifier, token])
}

